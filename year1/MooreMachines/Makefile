# Compiler settings
CC = gcc
CFLAGS = -Wall -Wextra -Wno-implicit-fallthrough -std=gnu17 -fPIC -O2
# Linker flags 
# -shared: we're creating a shared library 
# -Wl,--wrap=function: function wrapping for testing and tracking memory
LDFLAGS = -shared \
	-Wl,--wrap=malloc \
	-Wl,--wrap=calloc \
	-Wl,--wrap=realloc \
	-Wl,--wrap=reallocarray \
	-Wl,--wrap=free \
	-Wl,--wrap=strdup \
	-Wl,--wrap=strndup

# Object files needed for libma.so
OBJECTS = ma.o memory_tests.o

# Build shared library libma.so from object files
libma.so: $(OBJECTS)
	$(CC) $(LDFLAGS) $^ -o $@

# Compile objects
ma.o: ma.c ma.h
	$(CC) $(CFLAGS) -c $< -o $@
memory_tests.o: memory_tests.c memory_tests.h
	$(CC) $(CFLAGS) -c $< -o $@

# Build example program and link it with the library
ma_example: ma_example.c libma.so
	$(CC) $(CFLAGS) $< -L. -lma -o $@

# Clean up files generated by this makefile
.PHONY: clean
clean:
	-rm libma.so $(OBJECTS) ma_example
